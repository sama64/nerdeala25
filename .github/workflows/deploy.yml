name: Build and Deploy Nerdeala Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: ${{ github.repository }}/api
  WEB_IMAGE_NAME: ${{ github.repository }}/web
  WHATSAPP_IMAGE_NAME: ${{ github.repository }}/whatsapp

jobs:
  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      api-image: ${{ steps.image-api.outputs.image }}
      web-image: ${{ steps.image-web.outputs.image }}
      whatsapp-image: ${{ steps.image-whatsapp.outputs.image }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build FastAPI Backend
    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        build-args: |
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_ACCESS_TOKEN_EXPIRES_MINUTES=${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_MINUTES }}
          CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
          CLASSROOM_API_BASE_URL=${{ secrets.CLASSROOM_API_BASE_URL }}
          CLASSROOM_SERVICE_ACCOUNT_FILE=${{ secrets.CLASSROOM_SERVICE_ACCOUNT_FILE }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          DEBUG=${{ secrets.DEBUG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract API image reference
      id: image-api
      run: |
        # Get the SHA-based tag directly
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        IMAGE_REF="${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:sha-${SHORT_SHA}"
        echo "Generated image reference: $IMAGE_REF"
        echo "image=$IMAGE_REF" >> $GITHUB_OUTPUT
        
        # Debug: Show all available tags from metadata
        echo "Debug - Metadata tags:"
        echo '${{ steps.meta-api.outputs.tags }}'

    # Build Next.js Frontend
    - name: Extract metadata for Web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        build-args: |
          NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NODE_ENV=production
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract Web image reference
      id: image-web
      run: |
        # Get the SHA-based tag directly
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        IMAGE_REF="${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:sha-${SHORT_SHA}"
        echo "Generated image reference: $IMAGE_REF"
        echo "image=$IMAGE_REF" >> $GITHUB_OUTPUT
        
        # Debug: Show all available tags from metadata
        echo "Debug - Metadata tags:"
        echo '${{ steps.meta-web.outputs.tags }}'

    # Build WhatsApp Service
    - name: Extract metadata for WhatsApp
      id: meta-whatsapp
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WHATSAPP_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push WhatsApp image
      uses: docker/build-push-action@v5
      with:
        context: ./services/whatsapp
        push: true
        tags: ${{ steps.meta-whatsapp.outputs.tags }}
        labels: ${{ steps.meta-whatsapp.outputs.labels }}
        build-args: |
          REDIS_URL=${{ secrets.REDIS_URL }}
          WHATSAPP_QUEUE=${{ secrets.WHATSAPP_QUEUE }}
          WHATSAPP_MAX_RETRIES=${{ secrets.WHATSAPP_MAX_RETRIES }}
          WHATSAPP_CLIENT_ID=${{ secrets.WHATSAPP_CLIENT_ID }}
          DEBUG=${{ secrets.DEBUG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract WhatsApp image reference
      id: image-whatsapp
      run: |
        # Get the SHA-based tag directly
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        IMAGE_REF="${{ env.REGISTRY }}/${{ env.WHATSAPP_IMAGE_NAME }}:sha-${SHORT_SHA}"
        echo "Generated image reference: $IMAGE_REF"
        echo "image=$IMAGE_REF" >> $GITHUB_OUTPUT
        
        # Debug: Show all available tags from metadata
        echo "Debug - Metadata tags:"
        echo '${{ steps.meta-whatsapp.outputs.tags }}'

  # Run tests
  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install API dependencies
      run: |
        cd apps/api
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run API tests
      run: |
        cd apps/api
        pytest --cov=app --cov-report=xml

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json

    - name: Install Web dependencies
      run: |
        cd apps/web
        npm ci

    - name: Run Web linting and type checks
      run: |
        cd apps/web
        npm run lint
        npm run typecheck

    - name: Build Web application
      run: |
        cd apps/web
        npm run build

  # Deploy to production (main branch only)
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify required secrets
      run: |
        test -n "${{ secrets.VPS_HOST }}" || { echo "‚ùå VPS_HOST not set"; exit 1; }
        test -n "${{ secrets.VPS_USER }}" || { echo "‚ùå VPS_USER not set"; exit 1; }
        test -n "${{ secrets.VPS_SSH_KEY }}" || { echo "‚ùå VPS_SSH_KEY not set"; exit 1; }
        echo "‚úÖ All required deployment variables verified"

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ secrets.VPS_SSH_PORT || '22' }} -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Copy docker-compose file to VPS
      run: |
        scp -P ${{ secrets.VPS_SSH_PORT || '22' }} docker-compose.prod.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/nerdeala/

    - name: Deploy to production
      env:
        API_IMAGE: ${{ needs.build.outputs.api-image }}
        WEB_IMAGE: ${{ needs.build.outputs.web-image }}
        WHATSAPP_IMAGE: ${{ needs.build.outputs.whatsapp-image }}
      run: |
        echo "üîç Debug: API_IMAGE=$API_IMAGE"
        echo "üîç Debug: WEB_IMAGE=$WEB_IMAGE"  
        echo "üîç Debug: WHATSAPP_IMAGE=$WHATSAPP_IMAGE"
        
        # Check if variables are empty
        if [ -z "$API_IMAGE" ] || [ -z "$WEB_IMAGE" ] || [ -z "$WHATSAPP_IMAGE" ]; then
          echo "‚ùå ERROR: One or more image references are empty!"
          echo "API_IMAGE='$API_IMAGE'"
          echo "WEB_IMAGE='$WEB_IMAGE'"
          echo "WHATSAPP_IMAGE='$WHATSAPP_IMAGE'"
          exit 1
        fi
        
        ssh -p ${{ secrets.VPS_SSH_PORT || '22' }} ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          set -e
          export API_DOCKER_IMAGE='$API_IMAGE'
          export WEB_DOCKER_IMAGE='$WEB_IMAGE'
          export WHATSAPP_DOCKER_IMAGE='$WHATSAPP_IMAGE'
          
          echo 'üöÄ Starting Nerdeala production deployment...'
          
          cd /opt/nerdeala
          
          echo 'üê≥ Logging into GitHub Container Registry...'
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo 'üê≥ Pulling latest Docker images...'
          echo \"Debug: API_DOCKER_IMAGE=\$API_DOCKER_IMAGE\"
          echo \"Debug: WEB_DOCKER_IMAGE=\$WEB_DOCKER_IMAGE\" 
          echo \"Debug: WHATSAPP_DOCKER_IMAGE=\$WHATSAPP_DOCKER_IMAGE\"
          docker pull \"\$API_DOCKER_IMAGE\"
          docker pull \"\$WEB_DOCKER_IMAGE\"
          docker pull \"\$WHATSAPP_DOCKER_IMAGE\"
          
          echo 'üê≥ Stopping existing containers...'
          docker-compose -f docker-compose.prod.yml down || true
          
          echo 'üê≥ Starting production containers...'
          
          # Database configuration
          export DATABASE_URL=\"${{ secrets.DATABASE_URL }}\"
          export SYNC_DATABASE_URL=\"${{ secrets.SYNC_DATABASE_URL }}\"
          
          # JWT configuration
          export JWT_SECRET_KEY=\"${{ secrets.JWT_SECRET_KEY }}\"
          export JWT_ACCESS_TOKEN_EXPIRES_MINUTES=\"${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_MINUTES }}\"
          
          # CORS configuration
          export CORS_ORIGINS=\"${{ secrets.CORS_ORIGINS }}\"
          
          # API configuration
          export NEXT_PUBLIC_API_BASE_URL=\"${{ secrets.NEXT_PUBLIC_API_BASE_URL }}\"
          
          # Google Classroom configuration
          export CLASSROOM_API_BASE_URL=\"${{ secrets.CLASSROOM_API_BASE_URL }}\"
          export CLASSROOM_SERVICE_ACCOUNT_FILE=\"${{ secrets.CLASSROOM_SERVICE_ACCOUNT_FILE }}\"
          export CLASSROOM_SERVICE_ACCOUNT_PATH=\"${{ secrets.CLASSROOM_SERVICE_ACCOUNT_PATH }}\"
          
          # WhatsApp configuration
          export WHATSAPP_QUEUE=\"${{ secrets.WHATSAPP_QUEUE }}\"
          export WHATSAPP_MAX_RETRIES=\"${{ secrets.WHATSAPP_MAX_RETRIES }}\"
          export WHATSAPP_CLIENT_ID=\"${{ secrets.WHATSAPP_CLIENT_ID }}\"
          
          # Debug settings
          export DEBUG=\"false\"
          
          echo 'Debug: Environment variables set, starting containers...'
          docker-compose -f docker-compose.prod.yml up -d
          
          echo '‚è≥ Waiting for services to start...'
          sleep 60
          
          echo 'üîç Checking container status...'
          docker-compose -f docker-compose.prod.yml ps
          
          echo 'üè• Performing health checks...'
          for i in {1..5}; do
            if curl -f http://127.0.0.1:8000/health && curl -f http://127.0.0.1:3000/api/health; then
              echo '‚úÖ Health checks passed on attempt \$i'
              break
            else
              echo '‚è≥ Health check failed on attempt \$i, retrying...'
              sleep 15
            fi
          done
          
          echo 'üßπ Cleaning up old Docker images...'
          docker image prune -f || true
          
          echo '‚úÖ Nerdeala production deployment successful!'
        "

    - name: Post-deployment health check
      run: |
        echo "üè• Running post-deployment health checks..."
        sleep 30
        
        # Check if the services are accessible (assuming they're behind a reverse proxy)
        if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
          curl -f ${{ secrets.PRODUCTION_URL }}/health || { echo "‚ùå Production health check failed"; exit 1; }
          echo "‚úÖ Production health checks completed!"
        else
          echo "‚ö†Ô∏è PRODUCTION_URL not set, skipping external health check"
        fi

  # Cleanup old packages
  cleanup:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      packages: write
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ github.repository }}/api
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
      continue-on-error: true

    - name: Delete old web images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ github.repository }}/web
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
      continue-on-error: true

    - name: Delete old whatsapp images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ github.repository }}/whatsapp
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
      continue-on-error: true
